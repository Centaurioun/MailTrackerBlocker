//
//     Generated by class-dump 3.5b1 (64 bit) (Debug version compiled Dec  3 2019 19:59:57).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <MailFW/MFCriterion.h>

@class NSArray, NSString;

@interface MFMessageCriterion : MFCriterion
{
    NSString *_originalGroupUniqueID;	// 8 = 0x8
    long long _specialMailboxTypeCode;	// 16 = 0x10
    NSString *_groupUniqueID;	// 24 = 0x18
}

+ (id)stringForCriterionType:(long long)arg1;	// IMP=0x0000000000181889
+ (long long)criterionTypeForString:(id)arg1;	// IMP=0x0000000000181359
+ (void)_updateAddressDisplayNames:(id)arg1;	// IMP=0x000000000017d8f1
+ (id)messagesInConversationCriterionWithConversationIDs:(id)arg1;	// IMP=0x000000000017a5de
+ (void)initialize;	// IMP=0x000000000017a52e
@property(copy) NSString *groupUniqueID; // @synthesize groupUniqueID=_groupUniqueID;
@property long long specialMailboxTypeCode; // @synthesize specialMailboxTypeCode=_specialMailboxTypeCode;
// - (void).cxx_destruct;	// IMP=0x0000000000183365
@property(readonly, nonatomic) BOOL containsAddressBookCriteria;
@property(readonly, nonatomic) BOOL containsRelativeDateCriteria;
@property(readonly, nonatomic) BOOL containsMessageIsNotInATrashMailboxCriterion;
@property(readonly, nonatomic) BOOL containsIncludeConversationsCriterion;
@property(readonly, nonatomic) BOOL containsLastViewedDateCriterion;
- (BOOL)_containsCriterion:(long long)arg1;	// IMP=0x0000000000182e3c
@property(readonly, nonatomic) MFMessageCriterion *criterionByExpandingSpecialMailboxCriterion;
- (id)criterionByExpandingGroup;	// IMP=0x00000000001824ba
@property(readonly, copy, nonatomic) NSArray *emailAddressesForGroupCriterion;
@property(readonly, copy, nonatomic) NSArray *emailAddressesForVIPCriterion;
- (BOOL)containsSpotlightCriterion;	// IMP=0x0000000000181f2a
- (BOOL)isValid:(id *)arg1 options:(unsigned int)arg2;	// IMP=0x0000000000181cb7
@property(readonly, nonatomic) BOOL hasQualifier;
- (BOOL)allowsEmptyExpression;	// IMP=0x0000000000181bfb
- (BOOL)hasExpression;	// IMP=0x0000000000181bac
- (BOOL)isSatisfiedByMailboxURL:(id)arg1;	// IMP=0x0000000000180fba
- (BOOL)evaluateMessage:(id)arg1;	// IMP=0x0000000000180f40
- (BOOL)_evaluateMessage:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3 successfullyEvaluated:(char *)arg4;	// IMP=0x0000000000180b34
- (BOOL)doesMessageSatisfyRuleEvaluationCriterion:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3 successfullyEvaluated:(char *)arg4;	// IMP=0x0000000000180a9d
- (BOOL)_evaluateFlaggedStatusCriterion:(id)arg1;	// IMP=0x0000000000180894
- (BOOL)_evaluateSpecialMailboxCriterion:(id)arg1;	// IMP=0x00000000001806fc
- (BOOL)_mailboxURLString:(id)arg1 satisfiesQualifier:(long long)arg2 forExpression:(id)arg3;	// IMP=0x0000000000180580
- (BOOL)_evaluateSizeCriterion:(id)arg1;	// IMP=0x0000000000180481
- (BOOL)_evaluateGmailLabelCriterion:(id)arg1;	// IMP=0x0000000000180248
- (BOOL)_evaluateMailboxCriterion:(id)arg1;	// IMP=0x0000000000180191
- (BOOL)_evaluateFlagCriterion:(id)arg1;	// IMP=0x000000000017ffe4
- (BOOL)_evaluateCompoundCriterion:(id)arg1;	// IMP=0x000000000017fd62
- (BOOL)_evaluateAttachmentTypeCriterion:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3;	// IMP=0x000000000017f6a0
- (BOOL)_evaluateAttachmentCriterion:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3;	// IMP=0x000000000017f220
- (BOOL)_messageIsSignedByMe:(id)arg1;	// IMP=0x000000000017ee46
- (BOOL)_messageHasPassBookAttachment:(id)arg1;	// IMP=0x000000000017eb6b
- (BOOL)_evaluateJunkMailCriterion:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3;	// IMP=0x000000000017e5fc
- (BOOL)_evaluateJunkMailHeaders:(id)arg1;	// IMP=0x000000000017e2c5
- (BOOL)_evaluatePriorityIsLowCriterion:(id)arg1;	// IMP=0x000000000017e2a4
- (BOOL)_evaluatePriorityIsHighCriterion:(id)arg1;	// IMP=0x000000000017e283
- (BOOL)_evaluatePriorityIsNormalCriterion:(id)arg1;	// IMP=0x000000000017e262
- (BOOL)_evaluateMessageTypeCriterion:(id)arg1;	// IMP=0x000000000017e1ce
- (BOOL)_evaluateIsEncryptedCriterion:(id)arg1;	// IMP=0x000000000017e1b2
- (BOOL)_evaluateIsDigitallySignedCriterion:(id)arg1;	// IMP=0x000000000017e196
- (BOOL)_evaluateFullNameCriterion:(id)arg1;	// IMP=0x000000000017dbcd
- (BOOL)_evaluateAddressHistoryCriterion:(id)arg1 successfullyEvaluated:(char *)arg2;	// IMP=0x000000000017d48c
- (BOOL)_evaluateAccountCriterion:(id)arg1;	// IMP=0x000000000017d3b4
- (BOOL)_evaluateMemberOfVIPSendersCriterion:(id)arg1;	// IMP=0x000000000017d2fb
- (BOOL)_evaluateMemberOfGroupCriterion:(id)arg1;	// IMP=0x000000000017cfdc
- (BOOL)_doesGroup:(id)arg1 containSender:(id)arg2;	// IMP=0x000000000017cb8a
- (BOOL)_evaluateAddressBookCriterion:(id)arg1;	// IMP=0x000000000017ca2c
- (BOOL)_evaluateBodyCriterion:(id)arg1 fetchBody:(BOOL)arg2 needsBody:(char *)arg3;	// IMP=0x000000000017c695
- (BOOL)_evaluateHeaderCriterion:(id)arg1;	// IMP=0x000000000017bc30
- (BOOL)_evaluateDateCriterion:(id)arg1;	// IMP=0x000000000017b9ec
- (void)addHeadersRequiredForRoutingToArray:(id)arg1;	// IMP=0x000000000017b7c4
- (id)_headersRequiredForEvaluation;	// IMP=0x000000000017b672
@property(readonly, copy, nonatomic) NSArray *recursiveGroupUniqueIDs;
- (void)setCriterionIdentifier:(id)arg1;	// IMP=0x000000000017b28a
- (id)dictionaryRepresentationIncludePII:(BOOL)arg1;	// IMP=0x000000000017affe
- (BOOL)isEquivalent:(id)arg1;	// IMP=0x000000000017acdc
- (unsigned long long)hash;	// IMP=0x000000000017ac0a
- (BOOL)isEqual:(id)arg1;	// IMP=0x000000000017aa18
@property(readonly, copy) NSString *originalGroupUniqueID;
- (id)initWithDictionary:(id)arg1 andRemoveRecognizedKeysIfMutable:(BOOL)arg2;	// IMP=0x000000000017a656
- (id)SQLExpressionWithContext:(id)arg1 depth:(unsigned long long)arg2 enclosingSmartMailboxes:(id)arg3;	// IMP=0x000000000004a34b
- (BOOL)isExpressibleInTigerSchema;	// IMP=0x000000000004a0ac
- (BOOL)hasNumberCriterion;	// IMP=0x000000000004a060
- (id)criterionByMergingSpotlightCriteria;	// IMP=0x0000000000049a06
- (id)fixOnceWithExpandedSmartMailboxes:(id)arg1 forSpotlight:(BOOL)arg2;	// IMP=0x000000000004962d
- (void)setRuleExpression:(id)arg1;	// IMP=0x000000000017a468
- (id)ruleExpression;	// IMP=0x000000000017a41c
- (void)setRuleQualifier:(unsigned int)arg1;	// IMP=0x000000000017a2d0
- (unsigned int)ruleQualifier;	// IMP=0x000000000017a13e
- (void)setRuleHeader:(id)arg1;	// IMP=0x000000000017a0d4
- (id)ruleHeader;	// IMP=0x000000000017a07c
@property(nonatomic) unsigned int ruleType;

@end

